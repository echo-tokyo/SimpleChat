{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is a SimpleChat API written on Golang using Echo.",
        "title": "SimpleChat Go API",
        "contact": {},
        "version": "1.0"
    },
    "host": "150.241.82.68",
    "basePath": "/api",
    "paths": {
        "/chat/free": {
            "get": {
                "description": "Does not require auth cookie",
                "tags": [
                    "chat"
                ],
                "summary": "Free endpoint for test cookie auth",
                "operationId": "chat-free",
                "responses": {
                    "200": {
                        "description": "Free endpoint",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.General500"
                        }
                    }
                }
            }
        },
        "/chat/restricted": {
            "get": {
                "description": "Requires auth cookie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Restricted endpoint for test cookie auth",
                "operationId": "chat-restricted",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ChatRestricted401"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.General500"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Login existing user by email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login user",
                "operationId": "user-login",
                "parameters": [
                    {
                        "description": "Login params",
                        "name": "LoginUserIn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/serializers.LoginUserIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.UserLogin400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.UserLogin401"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.UserLogin404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.General500"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Register new user with form",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register user",
                "operationId": "user-register",
                "parameters": [
                    {
                        "description": "Register params",
                        "name": "RegisterUserIn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/serializers.RegisterUserIn"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.UserRegister400"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.UserRegister409"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.General500"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.ChatRestricted401": {
            "description": "ошибка отсутствия куков (истёк токен и соответственно куки авторизации вместе с ним)",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "token": " missing auth cookie"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/chat/restricted"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 401
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.General500": {
            "description": "обычная пятисотка от сервера, которую никто не ждёт",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "unknown": " some error desc"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/smth/shit"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 500
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserLogin400": {
            "description": "ошибка валидации входных данных",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "username": " username field must not be blank"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/login"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 400
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserLogin401": {
            "description": "ошибка неверного пароля",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "password": " invalid password"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/login"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 401
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserLogin404": {
            "description": "ошибка ненахождения юзера с таким логином в БД",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "getUser": " user with such username was not found"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/login"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 404
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserRegister400": {
            "description": "ошибка валидации входных данных",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "password": " password field must not be blank"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/register"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 400
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserRegister409": {
            "description": "ошибка регистрации юзера с уже существующим (занятым) логином",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "username": " user with such username already exists"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/register"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 409
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "models.User": {
            "description": "выходные даные входа и регистрации юзера",
            "type": "object",
            "properties": {
                "id": {
                    "description": "uuid юзера",
                    "type": "string",
                    "example": "e2f53f31-0598-4e36-b25d-41bd665764d1"
                },
                "username": {
                    "description": "логин юзера",
                    "type": "string",
                    "example": "vasya_2007"
                }
            }
        },
        "serializers.LoginUserIn": {
            "description": "входные данные для входа юзера",
            "type": "object",
            "properties": {
                "password": {
                    "description": "пароль юзера",
                    "type": "string",
                    "example": "qwerty123"
                },
                "username": {
                    "description": "логин юзера",
                    "type": "string",
                    "example": "vasya_2007"
                }
            }
        },
        "serializers.RegisterUserIn": {
            "description": "входные данные регистрации юзера",
            "type": "object",
            "properties": {
                "password": {
                    "description": "пароль юзера",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8,
                    "example": "qwerty123"
                },
                "username": {
                    "description": "логин юзера",
                    "type": "string",
                    "maxLength": 50,
                    "example": "vasya_2007"
                }
            }
        }
    },
    "securityDefinitions": {
        "CookieAuth": {
            "description": "JWT security token. Cookie is automatic added after auth is done (login/register).",
            "type": "apiKey",
            "name": "auth",
            "in": "cookie"
        }
    }
}