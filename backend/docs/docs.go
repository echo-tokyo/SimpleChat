// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/chat/get-messages/{username}": {
            "get": {
                "description": "Get chat messages (also chat uuid \u0026\u0026 chat participants) by username of another chat participant in path parameters",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Get chat messages",
                "operationId": "chat-get-messages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Get messages params",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Chat"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ChatGetMessages400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ChatGetMessages401"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ChatGetMessages404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.General500"
                        }
                    }
                }
            }
        },
        "/user/check/{username}": {
            "get": {
                "description": "Check user is exists by his username (returns error if checked current user)",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Check user is exists",
                "operationId": "user-check",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Check user is exists",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/serializers.CheckOut"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.UserCheck400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.UserCheck401"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.UserCheck404"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.UserCheck409"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.General500"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Login existing user by email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login user",
                "operationId": "user-login",
                "parameters": [
                    {
                        "description": "Login params",
                        "name": "LoginUserIn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/serializers.LoginUserIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.UserLogin400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.UserLogin401"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.UserLogin404"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.General500"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Register new user with form",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register user",
                "operationId": "user-register",
                "parameters": [
                    {
                        "description": "Register params",
                        "name": "RegisterUserIn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/serializers.RegisterUserIn"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.UserRegister400"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.UserRegister409"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.General500"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.ChatGetMessages400": {
            "description": "ошибка, возникающая при указании второго участника чата как себя",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "getMessages": "another chat participant cannot be the same user"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/chat/get-messages"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 400
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.ChatGetMessages401": {
            "description": "ошибка отсутствия куков (истёк токен и соответственно куки авторизации вместе с ним)",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "token": "missing auth cookie"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/chat/get-messages"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 401
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.ChatGetMessages404": {
            "description": "ошибка ненахождения юзера с таким логином в БД",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "getUser": "user with such username was not found"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/chat/get-messages"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 404
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.General500": {
            "description": "обычная пятисотка от сервера, которую никто не ждёт",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "unknown": "some error desc"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/smth/shit"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 500
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserCheck400": {
            "description": "ошибка валидации входных данных",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "username": "username field must not be blank"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/login"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 400
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserCheck401": {
            "description": "ошибка отсутствия куков (истёк токен и соответственно куки авторизации вместе с ним)",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "token": "missing auth cookie"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/chat/check"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 401
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserCheck404": {
            "description": "ошибка ненахождения юзера с таким логином в БД",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "getUser": "user with such username was not found"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/check"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 404
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserCheck409": {
            "description": "ошибка проверки текущего юзера",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "check": "current user was checked"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/check"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 409
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserLogin400": {
            "description": "ошибка валидации входных данных",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "username": "username field must not be blank"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/login"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 400
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserLogin401": {
            "description": "ошибка неверного пароля",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "password": "invalid password"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/login"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 401
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserLogin404": {
            "description": "ошибка ненахождения юзера с таким логином в БД",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "getUser": "user with such username was not found"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/login"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 404
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserRegister400": {
            "description": "ошибка валидации входных данных",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "password": "password field must not be blank"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/register"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 400
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "errors.UserRegister409": {
            "description": "ошибка регистрации юзера с уже существующим (занятым) логином",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "username": "user with such username already exists"
                    }
                },
                "path": {
                    "type": "string",
                    "example": "/api/user/register"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 409
                },
                "timestamp": {
                    "type": "string",
                    "example": "24-11-11 11:57:28 +03"
                }
            }
        },
        "models.Chat": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "uuid чата",
                    "type": "string",
                    "example": "0aafe1fd-0088-455b-9269-0307aae15bcc"
                },
                "messages": {
                    "description": "сообщения чата",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Message"
                    }
                },
                "users": {
                    "description": "участники чата",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "models.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "текст сообщения",
                    "type": "string",
                    "example": "sample message"
                },
                "createdAt": {
                    "description": "время создания сообщения",
                    "type": "string",
                    "example": "2024-11-13T12:34:56Z"
                },
                "sender": {
                    "description": "отправитель сообщения",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                }
            }
        },
        "models.User": {
            "description": "выходные даные входа и регистрации юзера",
            "type": "object",
            "properties": {
                "id": {
                    "description": "uuid юзера",
                    "type": "string",
                    "example": "e2f53f31-0598-4e36-b25d-41bd665764d1"
                },
                "username": {
                    "description": "логин юзера",
                    "type": "string",
                    "example": "vasya_2007"
                }
            }
        },
        "serializers.CheckOut": {
            "description": "выходные данные для проверки юзера на существование",
            "type": "object",
            "properties": {
                "isExists": {
                    "description": "подтверждение существования такого юзера",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "serializers.LoginUserIn": {
            "description": "входные данные для входа юзера",
            "type": "object",
            "properties": {
                "password": {
                    "description": "пароль юзера",
                    "type": "string",
                    "example": "qwerty123"
                },
                "username": {
                    "description": "логин юзера",
                    "type": "string",
                    "example": "vasya_2007"
                }
            }
        },
        "serializers.RegisterUserIn": {
            "description": "входные данные регистрации юзера",
            "type": "object",
            "properties": {
                "password": {
                    "description": "пароль юзера",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8,
                    "example": "qwerty123"
                },
                "username": {
                    "description": "логин юзера",
                    "type": "string",
                    "maxLength": 50,
                    "example": "vasya_2007"
                }
            }
        }
    },
    "securityDefinitions": {
        "CookieAuth": {
            "description": "JWT security token. Cookie is automatic added after auth is done (login/register).",
            "type": "apiKey",
            "name": "auth",
            "in": "cookie"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "150.241.82.68",
	BasePath:         "/api",
	Schemes:          []string{"http"},
	Title:            "SimpleChat Go API",
	Description:      "This is a SimpleChat API written on Golang using Echo.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
